//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MediaStreamer.Domain
{
    using System;
    using System.Collections.Generic;
#if NETCOREAPP || NET45 || NETSTANDARD
    using System.ComponentModel.DataAnnotations;
#endif
    using System.IO;
    using MediaStreamer.Domain;
    
    public partial class Composition : MediaEntity, IComposition, ICompositionInstance
    {
        public Composition()
        {
            this.CompositionVideos = new HashSet<CompositionVideo>();
            this.ListenedCompositions = new HashSet<ListenedComposition>();
        }
    
        public long CompositionID { get; set; }

#if NETCOREAPP || NET45 || NETSTANDARD
        [MaxLength(256)]
#endif
        public string CompositionName { get; set; }
        public Nullable<long> ArtistID { get; set; }
        public Nullable<long> AlbumID { get; set; }
        public Nullable<long> Duration { get; set; }

#if NETCOREAPP || NET45 || NETSTANDARD
        [StringLength(324)]
#endif
        public string FilePath { get; set; }

#if NETCOREAPP || NET45 || NETSTANDARD
        [StringLength(3600)]
#endif
        public string Lyrics { get; set; }

#if NETCOREAPP || NET45 || NETSTANDARD
        [StringLength(512)]
#endif
        public string About { get; set; }
    
        public virtual Album Album { get; set; }
        public virtual Artist Artist { get; set; }

        public virtual ICollection<CompositionVideo> CompositionVideos { get; set; }
        public virtual ICollection<ListenedComposition> ListenedCompositions { get; set; }

        public override string GetID()
        {
            return CompositionID.ToString();
        }
        public override string GetTitle()
        {
            return Artist.ArtistName;
        }

        public override string GetDescription()
        {
            return CompositionName;
        }
        public string GetPath()
        {
            return FilePath;
        }
        public override bool IsValid()
        {
            return File.Exists(FilePath);
        }
        public Composition GetInstance() 
        {
            return this;
        }
        public int CompareTo(Composition previous)
        {
            if (previous != null && CompositionID == previous.CompositionID)
                return 0;
            else if (previous != null && CompositionID < previous.CompositionID)
                return -1;
            else
                return 0;
        }
    }
}
